#!/bin/bash
# shellcheck disable=SC2140,SC2046,SC2086,SC2034
# Slackware build script for Slackware-Commander

# 2024 Anagnostakis Ioannis (a.k.a rizitis) Hellas.
# Updated 01/Jan/2025
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=scmd
SRCNAM=Slackware-Commander
VERSION=${VERSION:-6.0.2_DEV}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) ARCH=$( uname -m ) ;;
  esac
fi


if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
 SLKCFLAGS="-O2 -march=i586 -mtune=i686"
 LIBDIRSUFFIX=""
 QMAKE_CFLAGS="-O2 -m32 -march=i586 -mtune=i686"
 QMAKE_CXXFLAGS="-O2 -m32 -march=i586 -mtune=i686"
 QMAKE_LFLAGS="-L/usr/lib -L/usr/local/lib"
elif [ "$ARCH" = "i686" ]; then
 SLKCFLAGS="-O2 -march=i686 -mtune=i686"
 LIBDIRSUFFIX=""
 QMAKE_CFLAGS="-O2 -m32 -march=i686 -mtune=i686"
 QMAKE_CXXFLAGS="-O2 -m32 -march=i686 -mtune=i686"
 QMAKE_LFLAGS="-L/usr/lib -L/usr/local/lib"
elif [ "$ARCH" = "x86_64" ]; then
 SLKCFLAGS="-O2 -march=x86-64 -mtune=generic -fPIC"
 LIBDIRSUFFIX="64"
 QMAKE_CFLAGS="-O2 -m64 -march=x86-64 -mtune=generic -fPIC"
 QMAKE_CXXFLAGS="-O2 -m64 -march=x86-64 -mtune=generic -fPIC"
 QMAKE_LFLAGS="-L/usr/lib64 -L/usr/local/lib64"
elif [ "$ARCH" = "aarch64" ]; then
 SLKCFLAGS="-O2 -march=armv8-a -mtune=generic -fPIC"
 LIBDIRSUFFIX="64"
 QMAKE_CFLAGS="-O2 -march=armv8-a -mtune=generic -fPIC"
 QMAKE_CXXFLAGS="-O2 -march=armv8-a -mtune=generic -fPIC"
 QMAKE_LFLAGS="-L/usr/lib64 -L/usr/local/lib64"
else
 SLKCFLAGS="-O2"
 LIBDIRSUFFIX=""
 QMAKE_CFLAGS="-O2"
 QMAKE_CXXFLAGS="-O2"
 QMAKE_LFLAGS="-L/usr/lib"
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.gz
cd $SRCNAM-$PRGNAM-$VERSION


chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

SRC_DIR=src
QMAKE=qmake6
PKG_SBIN_DIR="$PKG/usr/local/sbin"
PKG_BIN_DIR="$PKG/usr/local/bin"
PKG_ETC_DIR="$PKG/etc"
PKG_DESKTOP_DIR="$PKG/usr/share/applications"
PKG_ICON_DIR="$PKG/usr/share/icons"
PKG_MAN_DIR="$PKG/usr/man"
PKG_DOC_DIR="/usr/doc"


for d in "$SRC_DIR"/*/; do
		cd $d &&
		$QMAKE &&
		make &&
		cd -
	done


mkdir -p "$PKG_SBIN_DIR"
for d in "$SRC_DIR"/*/; do
		cd $d &&
		if [ -f "$PRGNAM" ]; then
			cp "$PRGNAM" "$PKG_SBIN_DIR/"
		fi
		if [ -f "$PRGNAM"2 ]; then
			cp "$PRGNAM"2 "$PKG_SBIN_DIR/"
		fi
		cd -
    done


	mkdir -p "$PKG_BIN_DIR"
	for i in scripts/*; do
		if [ -f $i ]; then
			cp $i "$PKG_BIN_DIR"/
		fi
	done
	chmod +x $PKG_BIN_DIR/*

	mkdir -p $PKG_ETC_DIR
	cp -R ENV/* $PKK_ETC_DIR/

	mkdir -p $PKG_DESKTOP_DIR
	for desktop in desktops/*; do
		if [ -f $desktop ] && [[ $desktop == *.desktop ]]; then
			cp "$desktop" "$PKG_DESKTOP_DIR"/
		fi
	done

	mkdir -p "$PKG_ICON_DIR"
	cp -R icons/hicolor "$PKG_ICON_DIR"/
	cp -R icons/Slackware-Commander "$PKG_ICON_DIR"/

	mkdir -p $PKG_MAN_DIR
	cp -R man1 "$PKG_MAN_DIR"/



SUB_PKG=captain-slack
SUB_PRGNAM=cptn

pushd "$SUB_PKG" || exit
dirs=(
    "$PKG_BIN_DIR"/"$SUB_PKG"/
    "$PKG_ETC_DIR"/"$SUB_PKG"
    "$PKG"/var/lib/"$SUB_PKG"/mirror-db
    "$PKG"/var/lib/"$SUB_PKG"/system-db
    "$PKG"/var/log/"$SUB_PKG"
    "$PKG"/usr/share/"$SUB_PKG"
)

install -d "${dirs[@]}"


BIN_DIR="$PKG_BIN_DIR"/"$SUB_PKG"
ETC_DIR="$PKG_ETC_DIR"/"$SUB_PKG"
DOC_DIR="$PKG_DOC_DIR"/"$SUB_PKG"-2.3.3

install -d "$BIN_DIR" "$ETC_DIR" "$DOC_DIR"

install -m 644 "$SUB_PRGNAM"-main.ini "$ETC_DIR"/

install -m 755 "$SUB_PRGNAM" "$PKG_BIN_DIR"/

install -m 755 *.sh "$BIN_DIR"/

install -m 644 README* "$SUB_PRGNAM".SlackBuild UNLICENSE "$DOC_DIR"/

popd || exit

# Don't ship .la files:
rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done


mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh


cd $PKG
/sbin/makepkg --remove-tmp-rpaths -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
